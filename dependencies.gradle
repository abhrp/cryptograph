ext {
    buildToolsVersion = "28.0.3"
    minSDKVersion = 21
    compileSDKVersion = 28
    targetSDKVersion = 28
    kotlinVersion = "1.2.71"
    multiDexEnabled = true

    supportLibraryVersion = "28.0.0"
    roomVersion = "2.0.0"
    daggerVersion = "2.16"
    retrofitVersion = '2.4.0'
    retrofitRxJavaAdapterVersion = '1.0.0'
    okHttpVersion = '3.10.0'
    archComponents = '2.0.0'
    gsonVersion = '2.8.5'
    androidTestRunner = '1.1.0-alpha3'
    androidTestRules = '1.1.0'
    androidxCoreTesting = '2.0.0'
    rxAndroid = '2.0.2'
    picassoVersion = '2.71828'
    timberVersion = '4.7.1'
    glassFishAnnotationVersion = '10.0-b28'
    constraintLayoutVersion = '1.1.3'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    rxKotlinVersion = "2.3.0"
    javaxAnnotationVersion = "1.3.2"
    javaxInjectVersion = "1"

    jUnitVersion = "4.12"
    assertJVersion = "3.10.0"
    mockitoKotlinVersion = "1.6.0"
    robolectricVersion = "4.0"
    mockitoVersion = '2.19.0'
    espressoVersion = '3.1.0'
    moshiVersion = '1.6.0'

    androidxAnnotation = '1.0.0'
    androidxAppCompat = '1.0.0'
    androidxV4 = '1.0.0'
    androidxRecyclerView = '1.0.0'
    materialDesign = '1.0.0'

    anyChartVersion = '1.0.5'
    multidexVersion = '2.0.0'

    domainDependencies = [
            javaxAnnotation: "javax.annotation:javax.annotation-api:${javaxAnnotationVersion}",
            javaxInject: "javax.inject:javax.inject:${javaxInjectVersion}",
            rxKotlin: "io.reactivex.rxjava2:rxkotlin:${rxKotlinVersion}"
    ]

    domainTestDependencies = [
            jUnit: "junit:junit:${jUnitVersion}",
            assertJ: "org.assertj:assertj-core:${assertJVersion}",
            mockitoKotlin: "com.nhaarman:mockito-kotlin-kt1.1:${mockitoKotlinVersion}",
            mockitoCore: "org.mockito:mockito-core:${mockitoVersion}",
            mockitoInline: "org.mockito:mockito-inline:${mockitoVersion}"
    ]

    dataDependencies = [
            kotlin: "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion",
            rxKotlin: "io.reactivex.rxjava2:rxkotlin:${rxKotlinVersion}",
            javaxAnnotation: "javax.annotation:javax.annotation-api:${javaxAnnotationVersion}",
            javaxInject: "javax.inject:javax.inject:${javaxInjectVersion}"
    ]

    dataTestDependencies = [
            jUnit: "junit:junit:${jUnitVersion}",
            assertJ: "org.assertj:assertj-core:${assertJVersion}",
            mockitoKotlin: "com.nhaarman:mockito-kotlin-kt1.1:${mockitoKotlinVersion}",
            kotlinUnit: "org.jetbrains.kotlin:kotlin-test-junit:${kotlinVersion}",
            mockitoCore: "org.mockito:mockito-core:${mockitoVersion}",
            mockitoInline: "org.mockito:mockito-inline:${mockitoVersion}"
    ]

    remoteDependencies = [
            rxKotlin: "io.reactivex.rxjava2:rxkotlin:${rxKotlinVersion}",
            kotlin: "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion",
            javaxAnnotation: "javax.annotation:javax.annotation-api:${javaxAnnotationVersion}",
            javaxInject: "javax.inject:javax.inject:${javaxInjectVersion}",
            androidAnnotations: "com.android.support:support-annotations:${supportLibraryVersion}",
            okhttp: "com.squareup.okhttp3:okhttp:${okHttpVersion}",
            okhttpLogger: "com.squareup.okhttp3:logging-interceptor:${okHttpVersion}",
            retrofit: "com.squareup.retrofit2:retrofit:${retrofitVersion}",
            retrofitConverter: "com.squareup.retrofit2:converter-gson:${retrofitVersion}",
            moshiRetrofit: "com.squareup.retrofit2:converter-moshi:${retrofitVersion}",
            retrofitAdapter: "com.squareup.retrofit2:adapter-rxjava:${retrofitVersion}",
            retrofitAdapter2: "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0",
            moshiCodeGen: "com.squareup.moshi:moshi-kotlin-codegen:${moshiVersion}",
            moshi: "com.squareup.moshi:moshi-kotlin:${moshiVersion}"
    ]

    remoteTestDependencies = [
            jUnit: "junit:junit:${jUnitVersion}",
            assertJ: "org.assertj:assertj-core:${assertJVersion}",
            mockitoKotlin: "com.nhaarman:mockito-kotlin-kt1.1:${mockitoKotlinVersion}",
            kotlinUnit: "org.jetbrains.kotlin:kotlin-test-junit:${kotlinVersion}",
            androidRunner: "androidx.test:runner:${androidTestRunner}",
            androidTestRules: "androidx.test:rules:${androidTestRunner}",
            mockitoCore: "org.mockito:mockito-core:${mockitoVersion}",
            mockitoInline: "org.mockito:mockito-inline:${mockitoVersion}"
    ]

    cacheDependencies = [
            rxKotlin: "io.reactivex.rxjava2:rxkotlin:${rxKotlinVersion}",
            kotlin: "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion",
            javaxAnnotation: "javax.annotation:javax.annotation-api:${javaxAnnotationVersion}",
            javaxInject: "javax.inject:javax.inject:${javaxInjectVersion}",
            roomRuntime: "androidx.room:room-runtime:$roomVersion",
            roomCompiler: "androidx.room:room-compiler:$roomVersion",
            roomRx: "androidx.room:room-rxjava2:$roomVersion"
    ]

    cacheTestDependencies = [
            jUnit: "junit:junit:${jUnitVersion}",
            assertJ: "org.assertj:assertj-core:${assertJVersion}",
            mockitoKotlin: "com.nhaarman:mockito-kotlin-kt1.1:${mockitoKotlinVersion}",
            kotlinUnit: "org.jetbrains.kotlin:kotlin-test-junit:${kotlinVersion}",
            androidRunner: "androidx.test:runner:${androidTestRunner}",
            androidTestRules: "androidx.test:rules:${androidTestRunner}",
            roomTesting: "androidx.room:room-testing:${roomVersion}",
            archTesting: "androidx.arch.core:core-testing:${androidxCoreTesting}",
            robolectric: "org.robolectric:robolectric:${robolectricVersion}",
            mockitoCore: "org.mockito:mockito-core:${mockitoVersion}",
            mockitoInline: "org.mockito:mockito-inline:${mockitoVersion}"
    ]

    presentationDependencies = [
            rxKotlin: "io.reactivex.rxjava2:rxkotlin:${rxKotlinVersion}",
            kotlin: "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion",
            javaxAnnotation: "javax.annotation:javax.annotation-api:${javaxAnnotationVersion}",
            javaxInject: "javax.inject:javax.inject:${javaxInjectVersion}",
            rxAndroid: "io.reactivex.rxjava2:rxandroid:${rxAndroid}",
            archCommon: "androidx.lifecycle:lifecycle-common:${archComponents}",
            archRuntime: "androidx.lifecycle:lifecycle-runtime:${archComponents}",
            archCompiler: "androidx.lifecycle:lifecycle-compiler:${archComponents}",
            archExtensions: "androidx.lifecycle:lifecycle-extensions:${archComponents}",
            livedata: "androidx.lifecycle:lifecycle-livedata:${archComponents}",
            viewmodel: "androidx.lifecycle:lifecycle-viewmodel:${archComponents}"
    ]

    presentationTestDependencies = [
            jUnit: "junit:junit:${jUnitVersion}",
            assertJ: "org.assertj:assertj-core:${assertJVersion}",
            mockitoKotlin: "com.nhaarman:mockito-kotlin-kt1.1:${mockitoKotlinVersion}",
            kotlinUnit: "org.jetbrains.kotlin:kotlin-test-junit:${kotlinVersion}",
            androidRunner: "androidx.test:runner:${androidTestRunner}",
            androidTestRules: "androidx.test:rules:${androidTestRunner}",
            archTesting: "androidx.arch.core:core-testing:${androidxCoreTesting}",
            robolectric: "org.robolectric:robolectric:${robolectricVersion}",
            mockitoCore: "org.mockito:mockito-core:${mockitoVersion}",
            mockitoInline: "org.mockito:mockito-inline:${mockitoVersion}"
    ]

    uiDependencies = [
            rxKotlin: "io.reactivex.rxjava2:rxkotlin:${rxKotlinVersion}",
            kotlin: "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion",
            javaxAnnotation: "javax.annotation:javax.annotation-api:${javaxAnnotationVersion}",
            javaxInject: "javax.inject:javax.inject:${javaxInjectVersion}",
            androidAnnotations: "androidx.annotation:annotation:${androidxAnnotation}",
            daggerCompiler: "com.google.dagger:dagger-compiler:$daggerVersion",
            dagger: "com.google.dagger:dagger:$daggerVersion",
            rxAndroid: "io.reactivex.rxjava2:rxandroid:${rxAndroid}",
            archCommon: "androidx.lifecycle:lifecycle-common:${archComponents}",
            archRuntime: "androidx.lifecycle:lifecycle-runtime:${archComponents}",
            archCompiler: "androidx.lifecycle:lifecycle-compiler:${archComponents}",
            archExtensions: "androidx.lifecycle:lifecycle-extensions:${archComponents}",
            livedata: "androidx.lifecycle:lifecycle-livedata:${archComponents}",
            viewmodel: "androidx.lifecycle:lifecycle-viewmodel:${archComponents}",
            timber: "com.jakewharton.timber:timber:${timberVersion}",
            supportAppCompat: "androidx.appcompat:appcompat:${androidxAppCompat}",
            supportV4: "androidx.legacy:legacy-support-v4:${androidxV4}",
            recyclerView: "androidx.recyclerview:recyclerview:${androidxRecyclerView}",
            design: "com.google.android.material:material:${materialDesign}",
            daggerSupport: "com.google.dagger:dagger-android-support:${daggerVersion}",
            daggerProcessor: "com.google.dagger:dagger-android-processor:${daggerVersion}",
            roomRuntime: "androidx.room:room-runtime:$roomVersion",
            roomCompiler: "androidx.room:room-compiler:$roomVersion",
            roomRx: "androidx.room:room-rxjava2:$roomVersion",
            kotlinReflect: "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion",
            constraintLayout: "androidx.constraintlayout:constraintlayout:${constraintLayoutVersion}",
            constraintSolver: "androidx.constraintlayout:constraintlayout-solver:${constraintLayoutVersion}",
            anyChart: "com.github.AnyChart:AnyChart-Android:${anyChartVersion}",
            multidex: "androidx.multidex:multidex:${multidexVersion}"
    ]

    uiTestDependencies = [
            jUnit: "junit:junit:${jUnitVersion}",
            assertJ: "org.assertj:assertj-core:${assertJVersion}",
            mockitoKotlin: "com.nhaarman:mockito-kotlin-kt1.1:${mockitoKotlinVersion}",
            kotlinUnit: "org.jetbrains.kotlin:kotlin-test-junit:${kotlinVersion}",
            androidRunner: "androidx.test:runner:${androidTestRunner}",
            androidTestRules: "androidx.test:rules:${androidTestRunner}",
            archTesting: "androidx.arch.core:core-testing:${androidxCoreTesting}",
            robolectric: "org.robolectric:robolectric:${robolectricVersion}",
            mockitoCore: "org.mockito:mockito-core:${mockitoVersion}",
            mockitoInline: "org.mockito:mockito-inline:${mockitoVersion}",
            mockitoAndroid: "org.mockito:mockito-android:${mockitoVersion}",
            espressoCore: "androidx.test.espresso:espresso-core:${espressoVersion}",
            espressoIntents: "androidx.test.espresso:espresso-intents:${espressoVersion}",
            espressoContrib: "androidx.test.espresso:espresso-contrib:${espressoVersion}",
            multidexInstrumentation: "androidx.multidex:multidex-instrumentation:${multidexVersion}"
    ]
}